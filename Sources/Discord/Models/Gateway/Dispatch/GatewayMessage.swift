//
//  File.swift
//  
//
//  Created by Jia Chen Yee on 27/3/23.
//

import Foundation

public struct GatewayMessage: GatewayEventData {
    /// id of the message
    public var id: Snowflake
    
    /// id of the channel the message was sent in
    public var channel_id: Snowflake
    
    /// the author of this message (not guaranteed to be a valid user, see below)
    public var author: User?
    
    /// contents of the message
    public var content: String
    
    /// when this message was sent
    public var timestamp: ISO8601Timestamp
    
    /// when this message was edited (or null if never)
    public var edited_timestamp: ISO8601Timestamp?
    
    /// whether this was a TTS message
    public var tts: Bool
    
    /// whether this message mentions everyone
    public var mention_everyone: Bool
    
    /// users specifically mentioned in the message
    public var mentions: [User]
    
    /// roles specifically mentioned in this message
    public var mention_roles: [Snowflake]
    
    /// channels specifically mentioned in this message
    public var mention_channels: [ChannelMention]?
    
    /// any attached files
    public var attachments: [Attachment]
    
    /// any embedded content
    public var embeds: [Embed]
    
    /// reactions to the message
    public var reactions: [Reaction]?
    
    /// used for validating a message was sent
    public var nonce: Nonce?
    
    /// whether this message is pinned
    public var pinned: Bool
    
    /// if the message is generated by a webhook, this is the webhook's id
    public var webhook_id: Snowflake?
    
    /// type of message
    public var type: MessageType
    
    /// sent with Rich Presence-related chat embeds
    public var activity: MessageActivity?
    
    /// sent with Rich Presence-related chat embeds
    public var application: Application?
    
    /// if the message is an Interaction or application-owned webhook, this is the id of the application
    public var application_id: Snowflake?
    
    /// data showing the source of a crosspost, channel follow add, pin, or reply message
    public var message_reference: MessageReference?
    
    /// message flags combined as a bitfield
    public var flags: MessageFlags?
    
    /// the message associated with the message_reference
    public var referenced_message: ReferencedMessage?
    
    /// sent if the message is a response to an Interaction
    public var interaction: Interaction?
    
    /// the thread that was started from this message, includes thread member object
    public var thread: Channel?
    
    /// sent if the message contains components like buttons, action rows, or other interactive components
    public var components: [Component]?
    
    /// sent if the message contains stickers
    public var sticker_items: [StickerItem]?
    
    /// Deprecated the stickers sent with the message
    public var stickers: [Sticker]?
    
    /// A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread, it can be used to estimate the relative position of the message in a thread in company with total_message_sent on parent thread
    public var position: Int?
    
    /// data of the role subscription purchase or renewal that prompted this ROLE_SUBSCRIPTION_PURCHASE message
    public var role_subscription_data: RoleSubscriptionData?
    
    /// ID of the guild the message was sent in - unless it is an ephemeral message
    public var guild_id: Snowflake?
    
    /// Member properties for this message's author. Missing for ephemeral messages and messages from webhooks
    public var member: [GuildMember]?
}
